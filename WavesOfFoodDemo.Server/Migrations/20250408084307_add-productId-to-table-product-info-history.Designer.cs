// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WavesOfFoodDemo.Server.DataContext;

#nullable disable

namespace WavesOfFoodDemo.Server.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20250408084307_add-productId-to-table-product-info-history")]
    partial class addproductIdtotableproductinfohistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.CartDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductInfoHistoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductInfoHistoryId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.CartInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CartInfos", (string)null);
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductInfoHistoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoHistoryId");

                    b.HasIndex("ProductInfoId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BateryCapacity")
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectType")
                        .HasColumnType("text");

                    b.Property<string>("CpuType")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DetailsType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("RamType")
                        .HasColumnType("text");

                    b.Property<string>("RomType")
                        .HasColumnType("text");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductInfos", (string)null);
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductInfoHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BateryCapacity")
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectType")
                        .HasColumnType("text");

                    b.Property<string>("CpuType")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DetailsType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("RamType")
                        .HasColumnType("text");

                    b.Property<string>("RomType")
                        .HasColumnType("text");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductInfoHistorys");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAddress")
                        .HasColumnType("text");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .HasColumnType("text");

                    b.Property<string>("UserPhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserInfos", (string)null);
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.CartDetails", b =>
                {
                    b.HasOne("WavesOfFoodDemo.Server.Entities.CartInfo", "CartInfo")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WavesOfFoodDemo.Server.Entities.ProductInfo", "ProductInfo")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WavesOfFoodDemo.Server.Entities.ProductInfoHistory", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductInfoHistoryId");

                    b.Navigation("CartInfo");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.CartInfo", b =>
                {
                    b.HasOne("WavesOfFoodDemo.Server.Entities.UserInfo", "UserInfos")
                        .WithMany("CartInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductImage", b =>
                {
                    b.HasOne("WavesOfFoodDemo.Server.Entities.ProductInfoHistory", "ProductInfoHistories")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductInfoHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WavesOfFoodDemo.Server.Entities.ProductInfo", "ProductInfos")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductInfoHistories");

                    b.Navigation("ProductInfos");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductInfo", b =>
                {
                    b.HasOne("WavesOfFoodDemo.Server.Entities.Category", "Categories")
                        .WithMany("ProductInfos")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductInfoHistory", b =>
                {
                    b.HasOne("WavesOfFoodDemo.Server.Entities.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.CartInfo", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.Category", b =>
                {
                    b.Navigation("ProductInfos");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductInfo", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.ProductInfoHistory", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("WavesOfFoodDemo.Server.Entities.UserInfo", b =>
                {
                    b.Navigation("CartInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
